<?xml version="1.0" encoding="UTF-8"?>
<project name="xlite" default="build" basedir=".">


    <import file="${project.basedir}/execute-php.xml" description="Adhoc-task to execute php file"/>

    <target name="build"
            depends="select-mode-manual,set-properties,clean,prepare,phpunit-deployment,tests,php-documentor,analysis,create-build"/>
    <target name="interactive"
            depends="select-mode-manual,set-properties-interactive"/>
    <target name="cc"
            depends="select-mode-cc,set-properties,clean,prepare,phpunit-deployment-cc,tests,php-documentor,analysis,comparison,create-build"/>

    <target name="pure-build" depends="select-mode-manual,set-properties,clean,prepare,php-documentor,create-build"/>


    <target name="set-properties-interactive" depends="set-properties">

        <echo>Config properties...</echo>
        <propertyprompt promptText="db_host" propertyName="db_host" defaultValue="${db_host}"/>
        <propertyprompt promptText="db_socket" propertyName="db_socket" defaultValue="${db_socket}"/>
        <propertyprompt promptText="db_port" propertyName="db_port" defaultValue="${db_port}"/>
        <propertyprompt promptText="db_database" propertyName="db_database" defaultValue="${db_database}"/>
        <propertyprompt promptText="db_username" propertyName="db_username" defaultValue="${db_username}"/>
        <propertyprompt promptText="db_password" propertyName="db_password" defaultValue="${db_password}"/>
        <propertyprompt promptText="db_persistent" propertyName="db_persistent" defaultValue="${db_persistent}"/>
        <propertyprompt promptText="db_table_prefix" propertyName="db_table_prefix" defaultValue="${db_table_prefix}"/>
        <propertyprompt promptText="host_http" propertyName="host_http" defaultValue="${host_http}"/>
        <propertyprompt promptText="host_https" propertyName="host_https" defaultValue="${host_https}"/>
        <propertyprompt promptText="host_webdir" propertyName="host_webdir" defaultValue="${host_webdir}"/>
        <propertyprompt promptText="marketplace_url" propertyName="marketplace_url"
                        defaultValue="${marketplace_url}"/>

        <echo>Common properties...</echo>
        <propertyprompt promptText="jmeterDir" propertyName="jmeterDir" defaultValue="${jmeterDir}"/>
        <propertyprompt promptText="root" propertyName="root" defaultValue="${root}"/>
        <propertyprompt promptText="lcSuffix" propertyName="lcSuffix" defaultValue="${lcSuffix}"/>
        <propertyprompt promptText="buildRepoDir" propertyName="buildRepoDir" defaultValue="${buildRepoDir}"/>
        <propertyprompt promptText="label" propertyName="label" defaultValue="${label}"/>
        <propertyprompt promptText="sourceDir" propertyName="sourceDir" defaultValue="${sourceDir}"/>
        
        <echo>Tests properties</echo>
        <propertyprompt promptText="TEST_DEPLOYMENT_MODE" propertyName="TEST_DEPLOYMENT_MODE" defaultValue="${TEST_DEPLOYMENT_MODE}"/>
        <propertyprompt promptText="XLITE_DEV_CONFIG_DIR" propertyName="XLITE_DEV_CONFIG_DIR" defaultValue="${XLITE_DEV_CONFIG_DIR}"/>
        <propertyprompt promptText="XLITE_DEV_LIB_DIR" propertyName="XLITE_DEV_LIB_DIR" defaultValue="${XLITE_DEV_LIB_DIR}"/>
        <propertyprompt promptText="SELENIUM_SOURCE_URL" propertyName="SELENIUM_SOURCE_URL" defaultValue="${SELENIUM_SOURCE_URL}"/>
        <propertyprompt promptText="SELENIUM_SOURCE_URL_ADMIN" propertyName="SELENIUM_SOURCE_URL_ADMIN" defaultValue="${SELENIUM_SOURCE_URL_ADMIN}"/>
        <propertyprompt promptText="SELENIUM_SERVER" propertyName="SELENIUM_SERVER" defaultValue="${SELENIUM_SERVER}"/>
        <propertyprompt promptText="DRUPAL_SITE_PATH" propertyName="DRUPAL_SITE_PATH" defaultValue="${DRUPAL_SITE_PATH}"/>
        <propertyprompt promptText="SELENIUM_SCREENSHOTS_DIR" propertyName="SELENIUM_SCREENSHOTS_DIR" defaultValue="${SELENIUM_SCREENSHOTS_DIR}"/>
        <propertyprompt promptText="SELENIUM_SCREENSHOTS_URL" propertyName="SELENIUM_SCREENSHOTS_URL" defaultValue="${SELENIUM_SCREENSHOTS_URL}"/>
        <propertyprompt promptText="SELENIUM_SCREENSHOTS_PATH" propertyName="SELENIUM_SCREENSHOTS_PATH" defaultValue="${SELENIUM_SCREENSHOTS_PATH}"/>
    </target>


    <target name="set-properties-config">
        <property name="db_host" value="db.crtdev.local"/>
        <property name="db_socket" value=""/>
        <property name="db_port" value="3307"/>
        <property name="db_database" value="humanoid_lc_deploy_test"/>
        <property name="db_username" value="humanoid"/>
        <property name="db_password" value="Nu2seV82OWY2"/>
        <property name="db_persistent" value="Off"/>
        <property name="db_table_prefix" value="xlite_"/>
        <property name="host_http" value="xcart2-530.crtdev.local"/>
        <property name="host_https" value="xcart2-530.crtdev.local"/>
        <property name="host_webdir" value="/~humanoid/tests/build/src"/>
        <property name="marketplace_url" value="http://xcart2-530.crtdev.local/~vvs/site/?q=api/"/>
    </target>

    <target name="select-mode-cc">
        <property name="mode" value="cc"/>
    </target>

    <target name="select-mode-manual">
        <property name="mode" value="manual"/>
    </target>

    <target name="set-properties-common" depends="set-properties-config">

        <if>
            <equals arg1="${mode}" arg2="cc"></equals>
            <then>
                <property name="jmeterDir" value="/u/xcart/jakarta-jmeter-2.3.4"/>
                <property name="root" value="${project.basedir}"/>
                <property name="lcSuffix" value="/modules/lc_connector/litecommerce"/>
                <property name="buildRepoDir" value="/u/xcart/lc_night_builds"/>
                <property name="sourceDir" value="${root}/source"/>
            </then>
            <else>
                <property name="jmeterDir" value="${sourceDir}/.dev/lib/jmeter"/>
                <property name="root" value="${project.basedir}/../.."/>
                <property name="lcSuffix" value="/modules/lc_connector/litecommerce"/>
                <property name="buildRepoDir" value="${root}/reports"/>
                <property name="label" value="manual"/>
                <property name="sourceDir" value="${root}"/>
            </else>
        </if>

        <resolvepath file="${root}" propertyName="root"/>
        <resolvepath propertyName="sourceDir" file="${sourceDir}"/>
        <resolvepath propertyName="buildRepoDir" file="${buildRepoDir}"/>
        <property name="git_refspec" value="tests"/>
        <property name="buildDir" value="${root}/build"/>
        <property name="srcDir" value="${sourceDir}/src"/>
        <property name="distrDir" value="${buildDir}/output"/>
        <property name="installDir" value="${buildDir}/src"/>
        <property name="lcDir" value="${installDir}${lcSuffix}"/>
        
        <property name="varRunClasses" value="${installDir}${lcSuffix}/var/run/classes"/>
        <exec command="which php" outputProperty="phpPath"/>
        <exec command="which git" outputProperty="gitPath"/>
    </target>

    <target name="set-properties-tests" depends="set-properties-common">
        <property name="TEST_DEPLOYMENT_MODE" value="0"/>
        <!-- Directory where xlite-tests.config.php is located -->
        <property name="XLITE_DEV_CONFIG_DIR" value="${root}/.dev/etc"/>
        <!-- Directory with external libs (PHPUnit etc)-->
        <property name="XLITE_DEV_LIB_DIR" value="${root}/.dev/lib/phpunit"/>
        <!-- URL of LiteCommerce store (path only, w/o script) -->
        <property name="SELENIUM_SOURCE_URL" value="http://${host_http}${host_webdir}"/>
        <property name="SELENIUM_SOURCE_URL_ADMIN" value="${SELENIUM_SOURCE_URL}${lcSuffix}"/>
        <property name="SELENIUM_SERVER" value="cormorant.crtdev.local"/>
        <property name="DRUPAL_SITE_PATH" value="${installDir}"/>
        <property name="SELENIUM_SCREENSHOTS_DIR" value="selenium-screenshots"/>
        <property name="SELENIUM_SCREENSHOTS_URL" value="http://${SELENIUM_SERVER}/${SELENIUM_SCREENSHOTS_DIR}"/>
        <property name="SELENIUM_SCREENSHOTS_PATH" value="C:\\Inetpub\\wwwroot\\${SELENIUM_SCREENSHOTS_DIR}"/>
    </target>

    <target name="set-properties" depends="set-properties-tests">
        <property name="version" value="3.x-dev"/>
        <property name="apiUrl" value="http://${host_http}${host_webdir}"/>
    </target>


    <target name="clean">
        <if>
            <available file="${installDir}/sites/default" type="dir"/>
            <then>
                <chmod file="${installDir}/sites/default" mode="755"/>
            </then>
        </if>
        <delete dir="${buildDir}" includeemptydirs="true"/>
        <mkdir dir="${buildDir}"/>
        <mkdir dir="${buildDir}/logs"/>
        <mkdir dir="${buildDir}/api"/>
        <mkdir dir="${buildDir}/reports"/>
        <mkdir dir="${buildDir}/screenshots"/>
    </target>

    <target name="prepare">

        <echo message="Update current source"/>
        <gitpull gitPath="${gitPath}" repository="${sourceDir}" source="origin" refspec="tests" />

        <echo message="Run release builder"/>

        <exec command="${sourceDir}/.dev/build/release/release.sh -c -b ${label} -d ${distrDir} -t"
              dir="${sourceDir}/.dev/build/release"/>

        <echo message="Deploy built releases"/>
        <untar file="${distrDir}/drupal-lc3-${version}-${label}-test.tgz" todir="${buildDir}"/>

        <move file="${buildDir}/drupal" tofile="${installDir}"/>

        <echo message="Copy .dev from source directory"/>
        <mkdir dir="${buildDir}/.dev"/>
        <copy todir="${buildDir}/.dev">
            <fileset dir="${sourceDir}/.dev">
            </fileset>
        </copy>
        <echo message="Prepare deployed repositories"/>
        <copy overwrite="true" file="${sourceDir}/.dev/build/config.local.template.php"
              tofile="${buildDir}/.dev/build/config.local.php">
            <filterchain>
                <replacetokens>
                    <token key="db_host" value="${db_host}"/>
                    <token key="db_socket" value="${db_socket}"/>
                    <token key="db_port" value="${db_port}"/>
                    <token key="db_database" value="${db_database}"/>
                    <token key="db_username" value="${db_username}"/>
                    <token key="db_password" value="${db_password}"/>
                    <token key="db_persistent" value="${db_persistent}"/>
                    <token key="db_table_prefix" value="${db_table_prefix}"/>
                    <token key="host_http" value="${host_http}"/>
                    <token key="host_https" value="${host_https}"/>
                    <token key="host_webdir" value="${host_webdir}"/>
                    <token key="marketplace_url" value="${marketplace_url}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <copy overwrite="true" file="${sourceDir}/.dev/tests/local.template.php"
              tofile="${buildDir}/.dev/tests/local.php">
            <filterchain>
                <replacetokens>
                    <token key="TEST_DEPLOYMENT_MODE" value="${TEST_DEPLOYMENT_MODE}"/>
                    <token key="XLITE_DEV_CONFIG_DIR" value="${XLITE_DEV_CONFIG_DIR}"/>
                    <token key="XLITE_DEV_LIB_DIR" value="${XLITE_DEV_LIB_DIR}"/>
                    <token key="SELENIUM_SOURCE_URL" value="${SELENIUM_SOURCE_URL}"/>
                    <token key="SELENIUM_SOURCE_URL_ADMIN" value="${SELENIUM_SOURCE_URL_ADMIN}"/>
                    <token key="SELENIUM_SERVER" value="${SELENIUM_SERVER}"/>
                    <token key="DRUPAL_SITE_PATH" value="${DRUPAL_SITE_PATH}"/>
                    <token key="SELENIUM_SCREENSHOTS_DIR" value="${SELENIUM_SCREENSHOTS_DIR}"/>
                    <token key="SELENIUM_SCREENSHOTS_URL" value="${SELENIUM_SCREENSHOTS_URL}"/>
                    <token key="SELENIUM_SCREENSHOTS_PATH" value="${SELENIUM_SCREENSHOTS_PATH}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <copy overwrite="true" file="${sourceDir}/.dev/phpunit-xlite.template" tofile="${buildDir}/.dev/phpunit-xlite">
            <filterchain>
                <replacetokens>
                    <token key="XLITE_DEV_LIB_DIR" value="${XLITE_DEV_LIB_DIR}"/>
                    <token key="phpPath" value="${phpPath}"/>
                </replacetokens>
            </filterchain>
        </copy>
        <chmod file="${buildDir}/.dev/phpunit-xlite" mode="755"/>
        <exec dir="${lcDir}"
              command="php ${sourceDir}/.dev/build/devcode_postprocess.php"/>
    </target>

    <!-- Install Drupal+LC (local) -->
    <target name="phpunit-deployment">

        <exec command="${buildDir}/.dev/phpunit-xlite xliteAllTests ${buildDir}/.dev/tests/AllTests.php DEPLOY_DRUPAL"
              dir="${buildDir}"
              checkreturn="true"
              logoutput="true"/>
    </target>

    <!-- Install Drupal+LC (cc) -->
    <target name="phpunit-deployment-cc">
        <exec command="/u/xcart/bin/phpunit-xlite xliteAllTests ${buildDir}/.dev/tests/AllTests.php DEPLOY_DRUPAL"
              dir="${buildDir}"
              checkreturn="true"
              logoutput="true"/>
        <copy file="/u/xcart/etc/config.local.php"
              tofile="${lcDir}/etc/config.local.php"/>
    </target>

    <target name="tests" depends="prepare-db,plint,phpunit,php-codesniffer,jmeter"/>

    <target name="prepare-db">
        <!-- Replace SQL data by the demo data (for testing) -->
        <exec command="${lcDir}/restoredb demo admin" dir="${lcDir}" checkreturn="true"/>
        <!-- Rebuild cache: first pass -->
        <exec-php filename="${lcDir}/cart.php"
                  dir="${installDir}"/>
        <!-- Rebuild cache: second pass -->
        <exec-php filename="${lcDir}/cart.php"
                  dir="${installDir}"/>
        <!-- Rebuild cache: third pass -->
        <exec-php filename="${lcDir}/cart.php"
                  dir="${installDir}"/>
        <!-- Rebuild cache: fourth pass -->
        <exec-php filename="${lcDir}/cart.php"
                  dir="${installDir}"/>
        <!-- Rebuild cache: fifth pass -->
        <exec-php filename="${lcDir}/cart.php"
                  dir="${installDir}"/>
    </target>

    <target name="plint">
        <echo message="Run PHPlint"/>
        <phplint file="${lcDir}" tofile="${buildDir}/reports/plint.html"
                 haltonfailure="true"/>
        <!--<exec executable="${sourceDir}/.dev/phpl.sh" dir="${lcDir}" failonerror="true" output="${buildDir}/reports/plint.html" />-->
    </target>

    <target name="phpunit">
        <copy file="${sourceDir}/.dev/tests/PHPUnit/phpunit_coverage.php" todir="${buildDir}"/>
        <mkdir dir="${buildDir}/logs/coverage"/>
        <if>
            <equals arg1="${mode}" arg2="cc"></equals>
            <then>
                <exec command="/u/xcart/bin/phpunit-xlite --verbose --log-junit ${buildDir}/logs/phpunit.xml --coverage-clover ${buildDir}/logs/phpunit.coverage.xml --coverage-html ${buildDir}/coverage xliteAllTests ${buildDir}/.dev/tests/AllTests.php"
                      dir="${buildDir}"
                      checkreturn="true"/>
            </then>
            <else>
                <phpunit codecoverage="true"
                         haltonerror="true">
                    <formatter type="xml" outfile="${buildDir}/logs/phpunit.xml"/>
                    <batchtest name="xliteAllTests">
                        <fileset dir="${buildDir}">
                            <include name="${buildDir}/.dev/tests/AllTests.php"/>
                        </fileset>
                    </batchtest>
                </phpunit>
            </else>
        </if>
        <!--<exec command="phpunit - -verbose - -log-junit ${buildDir}/logs/phpunit.xml - -coverage-html ${buildDir}/logs/coverage xliteAllTests ${buildDir}/.dev/tests/AllTests.php"
              dir="${buildDir}" checkreturn="true" output="${buildDir}/reports/phpunit.txt"/>-->
        <exec-php filename=".dev/tests/graph-phing.php"
                  dir="${sourceDir}">
            <arg name="csv" value="${buildDir}/logs/phpunit.xml.speed"/>
            <arg name="dir" value="${buildDir}/reports"/>
            <arg name="prevDir" value="../../../artifacts/xlite"/>
        </exec-php>
    </target>

    <target name="php-codesniffer">
        <phpcodesniffer
                format="checkstyle"
                haltonerror="true"
                docFile="${buildDir}/logs/checkstyle.xml"
                standard="${sourceDir}/.dev/code-sniffs/XLite"
                file="${lcDir}/classes"
                ignorePatterns=".dev,src/etc,src/var"/>
    </target>

    <target name="jmeter">
        <echo message="Run JMeter"/>
        <exec command="${jmeterDir}/bin/jmeter -n -t ${sourceDir}/.dev/loadtests/JMeterLoadTest.jmx -l ${buildDir}/logs/JMeterResults.jtl"/>
        <xslt file="${buildDir}/logs/JMeterResults.jtl" tofile="${buildDir}/reports/jmeter.html"
              style="${sourceDir}/.dev/loadtests/jmeter-results-report.xsl"/>
        <exec-php filename="${sourceDir}.dev/loadtests/graph-phing.php"
                  dir="${sourceDir}"
                  params="${buildDir}/logs/JMeterResults.jtl, ${buildDir}/reports, ../../../artifacts/xlite"/>
    </target>

    <target name="php-documentor">
        <phpdoc configdir="${buildDir}/.dev/build/phpdoctor"
                destdir="${lcDir}/classes"/>

        <!--<exec-php filename="${buildDir}/.dev/lib/phpdoctor/phpdoc.php"
                  dir="${lcDir}/classes"
                  params=" ${buildDir}/.dev/build/phpdoctor.cc.ini"/>-->
        <move file="${lcDir}/classes/api" tofile="${buildDir}/api"/>
    </target>

    <target name="analysis" depends="phpdepend,phpmd,copy-paste-detect,git-stat"/>

    <target name="phpdepend">
        <echo message="Run PHPDepend"/>
        <phpdepend file="${varRunClasses}">
            <logger type="jdepend-chart" outfile="${buildDir}/reports/pdepend.svg"/>
            <logger type="overview-pyramid" outfile="${buildDir}/reports/pyramid.svg"/>
            <analyzer type="coderank-mode" value="property"/>
            <analyzer type="coderank-mode" value="inheritance"/>
            <analyzer type="coderank-mode" value="method"/>
        </phpdepend>
    </target>

    <target name="phpmd">
        <echo message="Run PHPMD"/>
        <phpmd file="${sourceDir}/src/classes" rulesets="codesize,design,naming,unusedcode">
            <formatter type="html" outfile="${buildDir}/reports/phpmd.html" useFile="true"/>
        </phpmd>
    </target>

    <target name="copy-paste-detect">
        <echo message="Run PHP Copy-Paste detecor"/>
        <phpcpd file="${sourceDir}/src">
            <formatter type="default" outfile="${buildDir}/reports/phpcpd.txt"/>
            <fileset dir="${sourceDir}/src">
                <exclude name="var"/>
                <exclude name="lib"/>
            </fileset>
        </phpcpd>
        <!--<exec executable="phpcpd" dir="${sourceDir}/src" output="${buildDir}/reports/phpcpd.txt" failonerror="false">
            <arg value="- -exclude" />
            <arg value="var" />
            <arg value="- -exclude" />
            <arg value="lib" />
            <arg value="${sourceDir}/src" />
        </exec>-->
    </target>

    <target name="git-stat">
        <echo message="Run Git stats"/>
        <mkdir dir="${buildDir}/reports/gitstat"/>
        <chmod file="${buildDir}/.dev/lib/gitstats/gitstats" mode="755"/>
        <exec command="${buildDir}/.dev/lib/gitstats/gitstats -c project_name=XLite -c authors_top=10 ${sourceDir} ${buildDir}/reports/gitstat"
              dir="${sourceDir}"/>
    </target>

    <target name="comparison">
        <!--exec executable="svn" dir="${buildDir}" >
            <arg line="checkout svn://svn.crtdev.local/repo/comparison/main comparison" />
        </exec>
        <ant antfile="${buildDir}/comparison/build.xml" target="cc" dir="${buildDir}/comparison" /-->
    </target>

    <target name="create-build">
        <tar destFile="${buildDir}/litecommerce-${version}.${label}-api.tgz" basedir="${buildDir}/api"
             compression="gzip"/>
        <exec command="${sourceDir}/.dev/build/release/release.sh -c -b ${label} -d ${distrDir}" dir="${buildDir}"/>
        <copy file="${buildDir}/litecommerce-${version}.${label}-api.tgz" todir="${buildRepoDir}" overwrite="true"/>
    </target>


</project>

